{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/createClass\");\n\nvar mh = require('multihashes');\n\nvar assert = require('assert'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nvar DAGLink =\n/*#__PURE__*/\nfunction () {\n  function DAGLink(name, size, multihash) {\n    _classCallCheck(this, DAGLink);\n\n    assert(multihash, 'A link requires a multihash to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name;\n    this._size = size;\n\n    if (typeof multihash === 'string') {\n      this._multihash = mh.fromB58String(multihash);\n    } else if (Buffer.isBuffer(multihash)) {\n      this._multihash = multihash;\n    }\n  }\n\n  _createClass(DAGLink, [{\n    key: \"toString\",\n    value: function toString() {\n      var mhStr = mh.toB58String(this.multihash);\n      return \"DAGLink <\".concat(mhStr, \" - name: \\\"\").concat(this.name, \"\\\", size: \").concat(this.size, \">\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        name: this.name,\n        size: this.size,\n        multihash: mh.toB58String(this._multihash)\n      };\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      throw new Error(\"Can't set property: 'name' is immutable\");\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    }\n  }, {\n    key: \"multihash\",\n    get: function get() {\n      return this._multihash;\n    },\n    set: function set(multihash) {\n      throw new Error(\"Can't set property: 'multihash' is immutable\");\n    }\n  }]);\n\n  return DAGLink;\n}();\n\nexports = module.exports = DAGLink;\nexports.create = require('./create');\nexports.util = require('./util');","map":null,"metadata":{},"sourceType":"script"}