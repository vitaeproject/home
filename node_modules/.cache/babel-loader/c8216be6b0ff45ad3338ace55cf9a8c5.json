{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Jen/UCB/home/src/Users.js\";\nimport React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText, Col } from 'reactstrap';\n\nvar Users =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Users, _React$Component);\n\n  function Users() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Users);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Users)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var accounts, ethAddress;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault(); //bring in user's metamask account address\n\n                _context.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context.sent;\n                console.log('Sending from Metamask account: ' + accounts[0]); //obtain contract address from storehash.js\n\n                _context.next = 7;\n                return storehash.options.address;\n\n              case 7:\n                ethAddress = _context.sent;\n\n                _this.setState({\n                  ethAddress: ethAddress\n                }); //save document to IPFS,return its hash#, and set hash# to state\n                //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n\n\n                _context.next = 11;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash\n\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n                  //return the transaction hash from the ethereum contract\n                  //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n\n                  storehash.methods.sendHash(_this.state.ipfsHash).send({\n                    from: accounts[0]\n                  }, function (error, transactionHash) {\n                    console.log(transactionHash);\n\n                    _this.setState({\n                      transactionHash: transactionHash\n                    });\n                  }); //storehash\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Users, [{\n    key: \"render\",\n    //onSubmit\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \" Choose resume to upload and verify\"), React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Button, {\n        bsStyle: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Upload\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Users;\n}(React.Component);\n\nexport { Users as default };","map":{"version":3,"sources":["/Users/Jen/UCB/home/src/Users.js"],"names":["React","Button","Form","FormGroup","Label","Input","FormText","Col","Users","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","onSubmit","event","preventDefault","web3","eth","getAccounts","accounts","console","log","storehash","options","address","setState","ipfs","add","err","hash","methods","sendHash","send","from","error","captureFile","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,QAAhD,EAA0DC,GAA1D,QAAqE,YAArE;;IAEqBC,K;;;;;;;;;;;;;;;;;UAEnBC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAC,IADH;AAENC,MAAAA,MAAM,EAAC,EAFD;AAGNC,MAAAA,UAAU,EAAC,EAHL;AAINC,MAAAA,WAAW,EAAC,EAJN;AAKNC,MAAAA,eAAe,EAAC,EALV;AAMNC,MAAAA,OAAO,EAAC,EANF;AAONC,MAAAA,SAAS,EAAE;AAPL,K;;UAURC,Q;;;;;+BAAW,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACTA,gBAAAA,KAAK,CAACC,cAAN,GADS,CAEV;;AAFU;AAAA,uBAGcC,IAAI,CAACC,GAAL,CAASC,WAAT,EAHd;;AAAA;AAGHC,gBAAAA,QAHG;AAKTC,gBAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCF,QAAQ,CAAC,CAAD,CAAxD,EALS,CAMT;;AANS;AAAA,uBAOeG,SAAS,CAACC,OAAV,CAAkBC,OAPjC;;AAAA;AAOHhB,gBAAAA,UAPG;;AAQT,sBAAKiB,QAAL,CAAc;AAACjB,kBAAAA,UAAU,EAAVA;AAAD,iBAAd,EARS,CAST;AACA;;;AAVS;AAAA,uBAWHkB,IAAI,CAACC,GAAL,CAAS,MAAKtB,KAAL,CAAWE,MAApB,EAA4B,UAACqB,GAAD,EAAMtB,QAAN,EAAmB;AACnDc,kBAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ,EAAgBtB,QAAhB,EADmD,CAEnD;;AACA,wBAAKmB,QAAL,CAAc;AAAEnB,oBAAAA,QAAQ,EAACA,QAAQ,CAAC,CAAD,CAAR,CAAYuB;AAAvB,mBAAd,EAHmD,CAInD;AACA;AACA;;;AAEAP,kBAAAA,SAAS,CAACQ,OAAV,CAAkBC,QAAlB,CAA2B,MAAK1B,KAAL,CAAWC,QAAtC,EAAgD0B,IAAhD,CAAqD;AACnDC,oBAAAA,IAAI,EAAEd,QAAQ,CAAC,CAAD;AADqC,mBAArD,EAEG,UAACe,KAAD,EAAQxB,eAAR,EAA4B;AAC7BU,oBAAAA,OAAO,CAACC,GAAR,CAAYX,eAAZ;;AACA,0BAAKe,QAAL,CAAc;AAACf,sBAAAA,eAAe,EAAfA;AAAD,qBAAd;AACD,mBALD,EARmD,CAa/C;AACL,iBAdK,CAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;AA0BR;6BAEM;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAFJ,EAGI,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKG,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAG,MADT;AAEE,QAAA,QAAQ,EAAI,KAAKsB,WAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKG,oBAAC,MAAD;AACA,QAAA,OAAO,EAAC,SADR;AAEA,QAAA,IAAI,EAAC,QAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALH,CAHJ,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,CADF;AAkBD;;;;EA3DgCvC,KAAK,CAACwC,S;;SAApBhC,K","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText, Col } from 'reactstrap';\n\nexport default class Users extends React.Component {\n\n  state = {\n    ipfsHash:null,\n    buffer:'',\n    ethAddress:'',\n    blockNumber:'',\n    transactionHash:'',\n    gasUsed:'',\n    txReceipt: ''\n  };\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n   //bring in user's metamask account address\n    const accounts = await web3.eth.getAccounts();\n\n    console.log('Sending from Metamask account: ' + accounts[0]);\n    //obtain contract address from storehash.js\n    const ethAddress= await storehash.options.address;\n    this.setState({ethAddress});\n    //save document to IPFS,return its hash#, and set hash# to state\n    //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n    await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      console.log(err,ipfsHash);\n      //setState by setting ipfsHash to ipfsHash[0].hash\n      this.setState({ ipfsHash:ipfsHash[0].hash });\n      // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n      //return the transaction hash from the ethereum contract\n      //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n      storehash.methods.sendHash(this.state.ipfsHash).send({\n        from: accounts[0]\n      }, (error, transactionHash) => {\n        console.log(transactionHash);\n        this.setState({transactionHash});\n      }); //storehash\n    }) //await ipfs.add\n  }; //onSubmit\n\n  render() {\n    return (\n      <div className=\"App\">\n        <hr />\n          <h3> Choose resume to upload and verify</h3>\n          <Form onSubmit={this.onSubmit}>\n            <input\n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button\n             bsStyle=\"primary\"\n             type=\"submit\">\n             Upload\n             </Button>\n          </Form>\n        <hr/>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}