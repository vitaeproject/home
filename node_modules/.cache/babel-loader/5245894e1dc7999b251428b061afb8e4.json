{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Jen/UCB/home/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Jen/UCB/home/src/Verifiers.js\";\nimport React, { Component } from 'react';\nimport { Alert, FormGroup, Label, Input, Form, Table, TabContent, TabPane, Nav, NavItem, NavLink, Button, Row, Col } from 'reactstrap';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport Linkify from 'react-linkify';\n\nvar Verifiers =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Verifiers, _Component);\n\n  function Verifiers() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Verifiers);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Verifiers)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: '',\n      userAddress: '',\n      result: ''\n    };\n\n    _this.captureFile = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.captureAddress = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var addr = event.target.value;\n\n      _this.setState({\n        userAddress: addr\n      });\n    };\n\n    _this.convertToBuffer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                //set this buffer -using es6 syntax\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onClick =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              _this.setState({\n                blockNumber: \"waiting..\"\n              });\n\n              _this.setState({\n                gasUsed: \"waiting...\"\n              }); //get Transaction Receipt in console on click\n              //See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n\n              _context2.next = 5;\n              return web3.eth.getTransactionReceipt(_this.state.transactionHash, function (err, txReceipt) {\n                console.log(err, txReceipt);\n\n                _this.setState({\n                  txReceipt: txReceipt\n                });\n              });\n\n            case 5:\n              _context2.next = 7;\n              return _this.setState({\n                blockNumber: _this.state.txReceipt.blockNumber\n              });\n\n            case 7:\n              _context2.next = 9;\n              return _this.setState({\n                gasUsed: _this.state.txReceipt.gasUsed\n              });\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[0, 11]]);\n    }));\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var accounts, ethAddress;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault(); //bring in user's metamask account address\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log('Sending from Metamask account: ' + accounts[0]); //obtain contract address from storehash.js\n\n                _context3.next = 7;\n                return storehash.options.address;\n\n              case 7:\n                ethAddress = _context3.sent;\n\n                _this.setState({\n                  ethAddress: ethAddress\n                }); //save document to IPFS,return its hash#, and set hash# to state\n                //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n\n\n                _context3.next = 11;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash\n\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n                  //return the transaction hash from the ethereum contract\n                  //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n\n                  storehash.methods.sendHash(_this.state.ipfsHash, _this.state.userAddress).send({\n                    from: accounts[0]\n                  }, function (error, transactionHash) {\n                    console.log(transactionHash);\n\n                    _this.setState({\n                      transactionHash: transactionHash\n                    });\n                  }); //storehash\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.onSubmitDownload =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var accounts, ethAddress, hash, j, address;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                event.preventDefault(); //bring in user's metamask account address\n\n                _context4.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context4.sent;\n                console.log('Sending from Metamask account: ' + accounts[0]); //obtain contract address from storehash.js\n\n                _context4.next = 7;\n                return storehash.options.address;\n\n              case 7:\n                ethAddress = _context4.sent;\n                _context4.next = 10;\n                return storehash.methods.downloadResumes().call({\n                  from: accounts[0]\n                });\n\n              case 10:\n                hash = _context4.sent;\n\n                _this.setState({\n                  result: ''\n                });\n\n                j = 0;\n\n              case 13:\n                if (!(j < hash.length)) {\n                  _context4.next = 25;\n                  break;\n                }\n\n                if (!(hash[j] == \"\")) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                return _context4.abrupt(\"continue\", 22);\n\n              case 18:\n                _context4.next = 20;\n                return storehash.methods.getUserAddress(hash[j]).call({\n                  from: accounts[0]\n                });\n\n              case 20:\n                address = _context4.sent;\n\n                _this.setState({\n                  result: _this.state.result + address + \": \" + \"https://gateway.ipfs.io/ipfs/\" + hash[j] + \"\\n\"\n                });\n\n              case 22:\n                j++;\n                _context4.next = 13;\n                break;\n\n              case 25:\n                if (_this.state.result == '') {\n                  _this.setState({\n                    result: \"There is no resumes assigned at this point.\"\n                  });\n                }\n\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Verifiers, [{\n    key: \"render\",\n    //onSubmitDownload\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Please install \", React.createElement(\"a\", {\n        href: \"https://metamask.io/\",\n        className: \"alert-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"MetaMask\"), \" and sign in!\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \" Click the button to view assigned resumes \"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.onSubmitDownload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \" View Assigned Resumes\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \" [User address]: [link to resume to be verified] \"), React.createElement(Linkify, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.state.result), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \" Choose verified resume to send to IPFS \"), React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"p1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"User Address:\"), React.createElement(\"input\", {\n        type: \"textArea\",\n        onChange: this.captureAddress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(Button, {\n        bsStyle: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Send\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \" Get Transaction Receipt \"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(Table, {\n        bordered: true,\n        responsive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Values\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.state.ipfsHash)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, this.state.ethAddress)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Tx Hash # \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, this.state.transactionHash)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Block Number # \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, this.state.blockNumber)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Gas Used\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.state.gasUsed)))));\n    } //render\n\n  }]);\n\n  return Verifiers;\n}(Component); //App\n\n\nexport default Verifiers;","map":{"version":3,"sources":["/Users/Jen/UCB/home/src/Verifiers.js"],"names":["React","Component","Alert","FormGroup","Label","Input","Form","Table","TabContent","TabPane","Nav","NavItem","NavLink","Button","Row","Col","web3","ipfs","storehash","Linkify","Verifiers","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","userAddress","result","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","captureAddress","addr","value","setState","Buffer","from","onClick","eth","getTransactionReceipt","err","console","log","onSubmit","getAccounts","accounts","options","address","add","hash","methods","sendHash","send","error","onSubmitDownload","downloadResumes","call","j","length","getUserAddress"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Alert, FormGroup, Label, Input, Form, Table, TabContent, TabPane, Nav, NavItem, NavLink, Button, Row, Col } from 'reactstrap';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport Linkify from 'react-linkify';\n\n\nclass Verifiers extends Component {\n\n    state = {\n      ipfsHash: null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: '',\n      userAddress: '',\n      result: ''\n    };\n\n    captureFile =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)\n    };\n\n    captureAddress =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const addr = event.target.value\n      this.setState({userAddress: addr})\n    };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n      try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n        //get Transaction Receipt in console on click\n        //See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n      } //try\n      catch(error){\n          console.log(error);\n      } //catch\n    } //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n     //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n\n      console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash\n        this.setState({ ipfsHash:ipfsHash[0].hash });\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        storehash.methods.sendHash(this.state.ipfsHash, this.state.userAddress).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        }); //storehash\n      }) //await ipfs.add\n    }; //onSubmit\n\n    onSubmitDownload = async (event) => {\n      event.preventDefault();\n     //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n\n      console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n      var hash = await storehash.methods.downloadResumes().call({from: accounts[0]});\n      var j;\n      this.setState({result: ''});\n      for (j = 0; j < hash.length; j++) {\n        if (hash[j] == \"\") {\n          continue;\n        } else {\n          let address = await storehash.methods.getUserAddress(hash[j]).call({from: accounts[0]});\n          this.setState({result: this.state.result + address + \": \" + \"https://gateway.ipfs.io/ipfs/\" + hash[j] + \"\\n\"});\n        }\n      }\n      if (this.state.result == '') {\n        this.setState({result: \"There is no resumes assigned at this point.\"});\n      }\n    }; //onSubmitDownload\n\n    render() {\n      return (\n        <div className=\"App\">\n          <Alert color=\"primary\">\n            Please install <a href=\"https://metamask.io/\" className=\"alert-link\">MetaMask</a> and sign in!\n          </Alert>\n          <h3> Click the button to view assigned resumes </h3>\n          <br></br>\n          <Button onClick = {this.onSubmitDownload}> View Assigned Resumes</Button>\n          <br></br>\n          <br></br>\n          <h6> [User address]: [link to resume to be verified] </h6>\n          <Linkify>{this.state.result}</Linkify>\n          <hr/>\n          <h3> Choose verified resume to send to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input\n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n            <p1>User Address:</p1>\n            <input type=\"textArea\" onChange={this.captureAddress}/>\n            <br></br>\n            <br></br>\n             <Button\n             bsStyle=\"primary\"\n             type=\"submit\">\n             Send\n             </Button>\n          </Form>\n          <hr/>\n          <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n          <br></br>\n          <Table bordered responsive>\n            <thead>\n              <tr>\n                <th>Tx Receipt Category</th>\n                <th>Values</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>IPFS Hash # stored on Eth Contract</td>\n                <td>{this.state.ipfsHash}</td>\n              </tr>\n              <tr>\n                <td>Ethereum Contract Address</td>\n                <td>{this.state.ethAddress}</td>\n              </tr>\n              <tr>\n                <td>Tx Hash # </td>\n                <td>{this.state.transactionHash}</td>\n              </tr>\n              <tr>\n                <td>Block Number # </td>\n                <td>{this.state.blockNumber}</td>\n              </tr>\n              <tr>\n                <td>Gas Used</td>\n                <td>{this.state.gasUsed}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      );\n    } //render\n} //App\nexport default Verifiers;\n"]},"metadata":{},"sourceType":"module"}