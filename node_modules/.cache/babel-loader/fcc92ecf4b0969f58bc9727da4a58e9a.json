{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar Block = require('ipfs-block');\n\nvar CID = require('cids');\n\nvar streamToValue = require('../utils/stream-to-value');\n\nmodule.exports = function (send) {\n  return promisify(function (args, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    } // TODO this needs to be adjusted with the new go-ipfs http-api\n\n\n    var cid;\n\n    try {\n      if (CID.isCID(args)) {\n        cid = args;\n        args = cid.toBaseEncodedString();\n      } else if (Buffer.isBuffer(args)) {\n        cid = new CID(args);\n        args = cid.toBaseEncodedString();\n      } else if (typeof args === 'string') {\n        cid = new CID(args);\n      } else {\n        return callback(new Error('invalid argument'));\n      }\n    } catch (err) {\n      return callback(err);\n    } // Transform the response from Buffer or a Stream to a Block\n\n\n    var transform = function transform(res, callback) {\n      if (Buffer.isBuffer(res)) {\n        callback(null, new Block(res, cid));\n      } else {\n        streamToValue(res, function (err, data) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, new Block(data, cid));\n        });\n      }\n    };\n\n    var request = {\n      path: 'block/get',\n      args: args,\n      qs: opts\n    };\n    send.andTransform(request, transform, callback);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}