{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar multiaddr = require('multiaddr');\n\nvar PeerId = require('peer-id');\n\nmodule.exports = function (send) {\n  return promisify(function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    var verbose = opts.v || opts.verbose;\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result.Strings) {\n        // go-ipfs <= 0.4.4\n        callback(null, result.Strings.map(function (p) {\n          var res = {};\n\n          if (verbose) {\n            var parts = p.split(' ');\n            res.addr = multiaddr(parts[0]);\n            res.latency = parts[1];\n          } else {\n            res.addr = multiaddr(p);\n          }\n\n          res.peer = PeerId.createFromB58String(res.addr.decapsulate('ipfs'));\n          return res;\n        }));\n      } else if (result.Peers) {\n        // go-ipfs >= 0.4.5\n        callback(null, result.Peers.map(function (p) {\n          var res = {\n            addr: multiaddr(p.Addr),\n            peer: PeerId.createFromB58String(p.Peer),\n            muxer: p.Muxer\n          };\n\n          if (p.Latency) {\n            res.latency = p.Latency;\n          }\n\n          if (p.Streams) {\n            res.streams = p.Streams;\n          }\n\n          return res;\n        }));\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}