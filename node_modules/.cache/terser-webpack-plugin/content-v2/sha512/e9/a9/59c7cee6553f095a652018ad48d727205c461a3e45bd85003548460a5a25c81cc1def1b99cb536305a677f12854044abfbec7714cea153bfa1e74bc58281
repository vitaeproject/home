{"map":"{\"version\":3,\"sources\":[\"/Users/Jen/UCB/home/src/App.js\",\"/Users/Jen/UCB/home/src/serviceWorker.js\",\"/Users/Jen/UCB/home/src/index.js\"],\"names\":[\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"userLogIn\",\"bind\",\"assertThisInitialized\",\"employerLogIn\",\"verifierLogIn\",\"react_default\",\"a\",\"createElement\",\"reactstrap_es\",\"className\",\"color\",\"size\",\"onClick\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"wRA+CeA,cAzCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAGbP,EAAKQ,UAAYR,EAAKQ,UAAUC,KAAfR,OAAAS,EAAA,EAAAT,CAAAA,OAAAS,EAAA,EAAAT,CAAAD,KACjBA,EAAKW,cAAgBX,EAAKW,cAAcF,KAAnBR,OAAAS,EAAA,EAAAT,CAAAA,OAAAS,EAAA,EAAAT,CAAAD,KACrBA,EAAKY,cAAgBZ,EAAKY,cAAcH,KAAnBR,OAAAS,EAAA,EAAAT,CAAAA,OAAAS,EAAA,EAAAT,CAAAD,KAPJA,+LAuBjB,OACEa,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,MACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQE,MAAM,UAAUC,KAAK,KAAKC,QAASjB,KAAKK,WAAhD,gBAEFK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,MACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQE,MAAM,UAAUC,KAAK,KAAKC,QAASjB,KAAKS,eAAhD,oBAEFC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,MACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQE,MAAM,UAAUC,KAAK,KAAKC,QAASjB,KAAKQ,eAAhD,6BAnCMU,EAAAA,WCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,EAAAA,EAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport './App.css';\\nimport { Button, ButtonGroup, Col, Row, Container } from 'reactstrap';\\n\\nclass App extends Component {\\n\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n\\n    }\\n    this.userLogIn = this.userLogIn.bind(this)\\n    this.employerLogIn = this.employerLogIn.bind(this)\\n    this.verifierLogIn = this.verifierLogIn.bind(this)\\n  }\\n\\n  userLogIn() {\\n\\n  }\\n\\n  employerLogIn() {\\n\\n  }\\n\\n  verifierLogIn() {\\n\\n  }\\n\\n  render() {\\n    return (\\n      <Container>\\n        <Row>\\n          <Col className=\\\"c1\\\">\\n            <Button color=\\\"primary\\\" size=\\\"lg\\\" onClick={this.userLogIn}>User Log In</Button>\\n          </Col>\\n          <Col className=\\\"c2\\\">\\n            <Button color=\\\"primary\\\" size=\\\"lg\\\" onClick={this.verifierLogIn}>Verifier Log In</Button>\\n          </Col>\\n          <Col className=\\\"c3\\\">\\n            <Button color=\\\"primary\\\" size=\\\"lg\\\" onClick={this.employerLogIn}>Employer Log In</Button>\\n          </Col>\\n        </Row>\\n      </Container>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{17:function(e,n,t){e.exports=t(30)},22:function(e,n,t){},24:function(e,n,t){},30:function(e,n,t){\"use strict\";t.r(n);var o=t(1),a=t.n(o),r=t(5),c=t.n(r),i=(t(22),t(11)),l=t(12),s=t(15),u=t(13),m=t(16),g=t(3),b=(t(24),t(4)),f=function(e){function n(e){var t;return Object(i.a)(this,n),(t=Object(s.a)(this,Object(u.a)(n).call(this,e))).state={},t.userLogIn=t.userLogIn.bind(Object(g.a)(Object(g.a)(t))),t.employerLogIn=t.employerLogIn.bind(Object(g.a)(Object(g.a)(t))),t.verifierLogIn=t.verifierLogIn.bind(Object(g.a)(Object(g.a)(t))),t}return Object(m.a)(n,e),Object(l.a)(n,[{key:\"userLogIn\",value:function(){}},{key:\"employerLogIn\",value:function(){}},{key:\"verifierLogIn\",value:function(){}},{key:\"render\",value:function(){return a.a.createElement(b.c,null,a.a.createElement(b.d,null,a.a.createElement(b.b,{className:\"c1\"},a.a.createElement(b.a,{color:\"primary\",size:\"lg\",onClick:this.userLogIn},\"User Log In\")),a.a.createElement(b.b,{className:\"c2\"},a.a.createElement(b.a,{color:\"primary\",size:\"lg\",onClick:this.verifierLogIn},\"Verifier Log In\")),a.a.createElement(b.b,{className:\"c3\"},a.a.createElement(b.a,{color:\"primary\",size:\"lg\",onClick:this.employerLogIn},\"Employer Log In\"))))}}]),n}(o.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));t(28);c.a.render(a.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[17,2,1]]]);","extractedComments":[]}