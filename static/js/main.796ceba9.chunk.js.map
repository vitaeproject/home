{"version":3,"sources":["storehash.js","web3.js","Users.js","Verifiers.js","Employers.js","ipfs.js","header.png","App.js","serviceWorker.js","index.js"],"names":["_web3__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","web3","eth","Contract","constant","inputs","name","type","outputs","payable","stateMutability","web3__WEBPACK_IMPORTED_MODULE_0__","n","Web3","window","currentProvider","Users","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","userAddress","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","_this","convertToBuffer","captureAddress","addr","value","setState","_callee","_Users_Jen_UCB_home_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","Buffer","from","result","sent","stop","this","onClick","_callee2","_context2","getTransactionReceipt","err","console","log","t0","onSubmit","_callee3","accounts","_context3","getAccounts","storehash","options","address","ipfs","add","hash","methods","uploadResumeToBeVerified","send","error","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","reactstrap__WEBPACK_IMPORTED_MODULE_8__","color","href","onChange","bsStyle","bordered","responsive","React","Component","Verifiers","sendHash","onSubmitDownload","_callee4","j","_context4","downloadResumes","call","length","abrupt","getUserAddress","react_linkify__WEBPACK_IMPORTED_MODULE_13___default","Employers","getResume","react_linkify__WEBPACK_IMPORTED_MODULE_12___default","require","host","port","protocol","module","exports","p","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","toggle","bind","assertThisInitialized","activeTab","employerLogIn","tab","_this2","react_default","src","width","reactstrap_es","tabs","classnames","active","tabId","sm","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.796ceba9.chunk.js","sourcesContent":["import web3 from './web3';\n//access our local copy to contract deployed on rinkeby testnet\n//use your own contract address\nconst address = '0xc343f10AEEB389CddFe74DdbA11865bdA8d5Ed0C';\n//use the ABI from your contract\nconst abi = [\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"addr\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"addSubscriber\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"addr\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"addVerifier\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"downloadResumes\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string[]\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"x\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"addr\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"sendHash\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"fallback\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"x\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"uploaderAddress\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"uploadResumeToBeVerified\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"addr\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getResume\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"resumeHash\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getUserAddress\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"hash\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getVerifier\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n]\nexport default new web3.eth.Contract(abi, address);\n","//overrides metamask v0.2 for our 1.0 version.\n//1.0 lets us use async and await instead of promises\nimport Web3 from 'web3';\n\nconst web3 = new Web3(window.web3.currentProvider);\nexport default web3;\n","import React, { Component } from 'react';\nimport { Alert, FormGroup, Label, Input, Form, Table, TabContent, TabPane, Nav, NavItem, NavLink, Button, Row, Col } from 'reactstrap';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nexport default class Users extends React.Component {\n\n      state = {\n        ipfsHash:null,\n        buffer:'',\n        ethAddress:'',\n        blockNumber:'',\n        transactionHash:'',\n        gasUsed:'',\n        txReceipt: '',\n        userAddress: ''\n      };\n\n      captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)\n      };\n\n      captureAddress =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const addr = event.target.value\n        this.setState({userAddress: addr})\n      };\n\n      convertToBuffer = async(reader) => {\n        //file is converted to a buffer for upload to IPFS\n          const buffer = await Buffer.from(reader.result);\n        //set this buffer -using es6 syntax\n          this.setState({buffer});\n      };\n\n      onClick = async () => {\n        try{\n          this.setState({blockNumber:\"waiting..\"});\n          this.setState({gasUsed:\"waiting...\"});\n          //get Transaction Receipt in console on click\n          //See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n          await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n            console.log(err,txReceipt);\n            this.setState({txReceipt});\n          }); //await for getTransactionReceipt\n          await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n          await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n        } //try\n        catch(error){\n            console.log(error);\n        } //catch\n      } //onClick\n\n      onSubmit = async (event) => {\n        event.preventDefault();\n       //bring in user's metamask account address\n        const accounts = await web3.eth.getAccounts();\n\n        console.log('Sending from Metamask account: ' + accounts[0]);\n        //obtain contract address from storehash.js\n        const ethAddress= await storehash.options.address;\n        this.setState({ethAddress});\n        //save document to IPFS,return its hash#, and set hash# to state\n        //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n        await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n          console.log(err,ipfsHash);\n          //setState by setting ipfsHash to ipfsHash[0].hash\n          this.setState({ ipfsHash:ipfsHash[0].hash });\n          // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n          //return the transaction hash from the ethereum contract\n          //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n          storehash.methods.uploadResumeToBeVerified(this.state.ipfsHash, this.state.userAddress).send({\n            from: accounts[0]\n          }, (error, transactionHash) => {\n            console.log(transactionHash);\n            this.setState({transactionHash});\n          }); //storehash\n        }) //await ipfs.add\n      }; //onSubmit\n\n      render() {\n        return (\n          <div className=\"App\">\n            <Alert color=\"primary\">\n              Please install <a href=\"https://metamask.io/\" className=\"alert-link\">MetaMask</a> and sign in!\n            </Alert>\n            <h3> Upload resumes to be verified </h3>\n            <Form onSubmit={this.onSubmit}>\n              <input\n                type = \"file\"\n                onChange = {this.captureFile}\n              />\n              <p1>Your Address:</p1>\n              <input type=\"textArea\" onChange={this.captureAddress}/>\n              <br></br>\n               <Button\n               color=\"primary\"\n               bsStyle=\"primary\"\n               type=\"submit\">\n               Upload\n               </Button>\n            </Form>\n            <hr/>\n            <Button color=\"secondary\" onClick = {this.onClick}> Get Transaction Receipt </Button>\n            <Table bordered responsive>\n              <thead>\n                <tr>\n                  <th>Tx Receipt Category</th>\n                  <th>Values</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>IPFS Hash # stored on Eth Contract</td>\n                  <td>{this.state.ipfsHash}</td>\n                </tr>\n                <tr>\n                  <td>Ethereum Contract Address</td>\n                  <td>{this.state.ethAddress}</td>\n                </tr>\n                <tr>\n                  <td>Tx Hash # </td>\n                  <td>{this.state.transactionHash}</td>\n                </tr>\n                <tr>\n                  <td>Block Number # </td>\n                  <td>{this.state.blockNumber}</td>\n                </tr>\n                <tr>\n                  <td>Gas Used</td>\n                  <td>{this.state.gasUsed}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </div>\n        );\n      } //render\n  } //App\n","import React, { Component } from 'react';\nimport { Alert, FormGroup, Label, Input, Form, Table, TabContent, TabPane, Nav, NavItem, NavLink, Button, Row, Col } from 'reactstrap';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport Linkify from 'react-linkify';\n\nclass Verifiers extends Component {\n\n    state = {\n      ipfsHash: null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: '',\n      userAddress: '',\n      result: ''\n    };\n\n    captureFile =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)\n    };\n\n    captureAddress =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const addr = event.target.value\n      this.setState({userAddress: addr})\n    };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n      try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n        //get Transaction Receipt in console on click\n        //See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n      } //try\n      catch(error){\n          console.log(error);\n      } //catch\n    } //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n     //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n\n      console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash\n        this.setState({ ipfsHash:ipfsHash[0].hash });\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        storehash.methods.sendHash(this.state.ipfsHash, this.state.userAddress).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        }); //storehash\n      }) //await ipfs.add\n    }; //onSubmit\n\n    onSubmitDownload = async (event) => {\n      event.preventDefault();\n     //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n\n      console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n      var hash = await storehash.methods.downloadResumes().call({from: accounts[0]});\n      var j;\n      this.setState({result: \"[User address]: [link to resume to be verified]\\n\"});\n      for (j = 0; j < hash.length; j++) {\n        if (hash[j] == \"\") {\n          continue;\n        } else {\n          let address = await storehash.methods.getUserAddress(hash[j]).call({from: accounts[0]});\n          this.setState({result: this.state.result + address + \": \" + \"https://gateway.ipfs.io/ipfs/\" + hash[j] + \"\\n\"});\n        }\n      }\n      if (this.state.result == \"[User address]: [link to resume to be verified]\\n\") {\n        this.setState({result: \"There is no resumes assigned at this point.\"});\n      }\n    }; //onSubmitDownload\n\n    render() {\n      return (\n        <div className=\"App\">\n          <Alert color=\"warning\">\n            Please install <a href=\"https://metamask.io/\" className=\"alert-link\">MetaMask</a> and sign in!\n          </Alert>\n          <h3> Click the button to view assigned resumes </h3>\n          <br></br>\n          <Button color=\"warning\" onClick = {this.onSubmitDownload}> View Assigned Resumes</Button>\n          <br></br>\n          <br></br>\n          <Linkify>{this.state.result}</Linkify>\n          <hr/>\n          <h3> Choose verified resume to send to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input\n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n            <p1>User Address:</p1>\n            <input type=\"textArea\" onChange={this.captureAddress}/>\n            <br></br>\n            <br></br>\n             <Button\n             color=\"warning\"\n             bsStyle=\"primary\"\n             type=\"submit\">\n             Send\n             </Button>\n          </Form>\n          <hr/>\n          <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n          <br></br>\n          <Table bordered responsive>\n            <thead>\n              <tr>\n                <th>Tx Receipt Category</th>\n                <th>Values</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>IPFS Hash # stored on Eth Contract</td>\n                <td>{this.state.ipfsHash}</td>\n              </tr>\n              <tr>\n                <td>Ethereum Contract Address</td>\n                <td>{this.state.ethAddress}</td>\n              </tr>\n              <tr>\n                <td>Tx Hash # </td>\n                <td>{this.state.transactionHash}</td>\n              </tr>\n              <tr>\n                <td>Block Number # </td>\n                <td>{this.state.blockNumber}</td>\n              </tr>\n              <tr>\n                <td>Gas Used</td>\n                <td>{this.state.gasUsed}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      );\n    } //render\n} //App\nexport default Verifiers;\n","import React, { Component } from 'react';\nimport { Alert, Button, Form, FormGroup, Label, Input, FormText, Col } from 'reactstrap';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport Linkify from 'react-linkify';\n\nclass Employers extends Component {\n\n    state = {\n      ipfsHash: null,\n      result:'',\n      buffer:'',\n      ethAddress:'',\n      userAddress: ''\n    };\n\n    captureAddress = (event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const addr = event.target.value\n      this.setState({userAddress: addr})\n    };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n     //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n\n      console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n      let hash = await storehash.methods.getResume(this.state.userAddress).call({\n        from: accounts[0]\n      });\n      this.setState({ipfsHash: \"https://gateway.ipfs.io/ipfs/\" + hash});\n      this.setState({result: \"See result at \" + this.state.ipfsHash})\n    }; //onSubmit\n\n    render() {\n      return (\n        <div className=\"App\">\n          <Alert color=\"success\">\n            Please install <a href=\"https://metamask.io/\" className=\"alert-link\">MetaMask</a> and sign in!\n          </Alert>\n          <h3> Enter applicant's user address to see result </h3>\n          <Form onSubmit={this.onSubmit}>\n            <p1>Applicant's User Address:</p1>\n            <input type=\"textArea\" onChange={this.captureAddress}/>\n            <br></br>\n            <br></br>\n             <Button\n             color=\"success\"\n             bsStyle=\"primary\"\n             type=\"submit\">\n             View Result\n             </Button>\n          </Form>\n          <Linkify>{this.state.result}</Linkify>\n        </div>\n      );\n    } //render\n} //App\nexport default Employers;\n","//using the infura.io node, otherwise ipfs requires you to run a //daemon on your own computer/server.\nconst IPFS = require('ipfs-api');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n//run with local daemon\n// const ipfsApi = require('ipfs-api');\n// const ipfs = new ipfsApi('localhost', '5001', {protocol:'http'});\nexport default ipfs;\n","module.exports = __webpack_public_path__ + \"static/media/header.6db7eb10.png\";","import React from 'react';\nimport { Form, Table, TabContent, TabPane, Nav, NavItem, NavLink, Button, Row, Col } from 'reactstrap';\nimport classnames from 'classnames';\nimport Users from './Users.js';\nimport Verifiers from './Verifiers.js';\nimport Employers from './Employers.js';\nimport web3 from './web3.js';\nimport ipfs from './ipfs.js';\nimport storehash from './storehash.js';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      activeTab: '1'\n    };\n    this.employerLogIn = this.employerLogIn.bind(this)\n  }\n\n  employerLogIn() {\n\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <img src={require('./header.png')} width=\"100%\"/>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '1' })}\n              onClick={() => { this.toggle('1'); }}\n            >\n              Users\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '2' })}\n              onClick={() => { this.toggle('2'); }}\n            >\n              Verifiers\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '3' })}\n              onClick={() => { this.toggle('3'); }}\n            >\n              Employers\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <Row>\n              <Col sm=\"12\">\n                <Users></Users>\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Row>\n              <Col sm=\"12\">\n                <Verifiers></Verifiers>\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"3\">\n            <Row>\n              <Col sm=\"12\">\n                <Employers></Employers>\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}